#jinja2: newline_sequence:'\r\n'
version: '3.4'

services:

{% for service in vars.services %}
  {{ service.name }}:
    image: {{registry_host}}/{{ service.name }}
    ports:
      - target: {{ service.port }}
        published: {{ service.port }}
        protocol: tcp
    tty:
      true
    restart:
      unless-stopped
    deploy:
      endpoint_mode: vip
      replicas: 2
      placement:
{% if service.deploy_target == 'windows' %}
        constraints: [node.labels.os==windows]
{% else %}
        constraints: [node.labels.os==linux]
{% endif %}
      labels:
        - "traefik.port={{ service.port }}"
        - "traefik.docker.network={{ application_stack_name }}_{{ swarm_network_name }}"
        - "traefik.backend={{ service.name }}"
# Use Traefik healthcheck        "traefik.backend.healthcheck.path": "/healthcheck",
        - "traefik.frontend.rule=Host:{{ service.name }}.{{ docker_domain }}"
    networks:
     - {{swarm_network_name }}

{% endfor %}

  traefik:
    image: traefik
    ports:
      - target: 80
        published: 80
        protocol: tcp
      - target: 8080
        published: 8080
        protocol: tcp
    tty:
      true
    restart:
      unless-stopped
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.os==linux]
        constraints: [node.role == manager]
    command:
      - --docker
      - --docker.swarmmode
      - --docker.domain={{ docker_domain }}
      - --docker.watch
      - --web
      - --logLevel=DEBUG
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

    networks:
     - {{swarm_network_name }}

networks:
  {{ swarm_network_name }}: