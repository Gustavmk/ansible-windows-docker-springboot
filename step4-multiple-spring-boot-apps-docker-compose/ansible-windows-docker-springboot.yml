---
- hosts: "{{host}}"
  vars:
    base_path: "C:\\spring-boot"
    service_registry_name: eureka-serviceregistry
    zipkin_name: zipkin-dashboard
    services:
      - name: eureka-serviceregistry
        path_to_jar: "../../cxf-spring-cloud-netflix-docker/eureka-serviceregistry/target/eureka-serviceregistry-0.0.1-SNAPSHOT.jar"
        port: 8761
        map_to_same_port_on_host: true
      - name: eureka-serviceregistry-backup
        path_to_jar: "../../cxf-spring-cloud-netflix-docker/eureka-serviceregistry/target/eureka-serviceregistry-0.0.1-SNAPSHOT.jar"
        port: 8761
      - name: zuul-edgeservice
        path_to_jar: "../../cxf-spring-cloud-netflix-docker/zuul-edgeservice/target/zuul-edgeservice-0.0.1-SNAPSHOT.jar"
        port: 8080
        map_to_same_port_on_host: true
      - name: zipkin-dashboard
        path_to_jar: "../../cxf-spring-cloud-netflix-docker/zipkin-dashboard/target/zipkin-dashboard-0.0.1-SNAPSHOT.jar"
        port: 9411
        map_to_same_port_on_host: true
      - name: weatherbackend
        path_to_jar: "../../cxf-spring-cloud-netflix-docker/weatherbackend/target/weatherbackend-0.0.1-SNAPSHOT.jar"
        port: 8090
      - name: weatherbackend-second
        path_to_jar: "../../cxf-spring-cloud-netflix-docker/weatherbackend/target/weatherbackend-0.0.1-SNAPSHOT.jar"
        port: 8090
      - name: weatherservice
        path_to_jar: "../../cxf-spring-cloud-netflix-docker/weatherservice/target/weatherservice-0.0.1-SNAPSHOT.jar"
        port: 8095

  tasks:
  - name: Create base directory C:\spring-boot, if not there
    win_file: path={{base_path}} state=directory

  - name: Preparing the Spring Boot AppÂ´s Files for later docker-compose run
    include: spring-boot-app-prepare.yml
    with_items: "{{ vars.services }}"

  - name: Template docker-compose.yml to directory C:\spring-boot
    win_template:
      src: "templates/docker-compose.j2"
      dest: "{{base_path}}\\docker-compose.yml"

  - name: Stop all Service Docker containers (if there)
    win_shell: docker-compose --project-name app stop
    args:
      chdir: "{{base_path}}"
    ignore_errors: yes

  - name: Remove all Service Docker containers (if there)
    win_shell: docker-compose --project-name app rm -f
    args:
      chdir: "{{base_path}}"
    ignore_errors: yes

  - name: (Re-)Build all Service Docker images
    win_shell: docker-compose build
    args:
      chdir: "{{base_path}}"
    ignore_errors: yes

  # As we later need to know our container's names for healthchecking but also want to be able to scale out, we're not able to use
  # containername feature https://docs.docker.com/compose/compose-file/#containername
  # But there's help! With docker-compose --project-name aCustomContainerNameBeginning (https://github.com/docker/compose/issues/3722)
  # we'll know exactly the names of our containers, which are app_service.name_1 - like app_weatherservice_1
  - name: Run all Services Docker containers
    win_shell: docker-compose --project-name app up -d
    args:
      chdir: "{{base_path}}"
    register: first_compose_up_run_result
    ignore_errors: yes

  # Sadly there are situations, where the first attempt to do a docker-compose up will fail for only some of our services
  # with this error: 'failed to create endpoint app_xyz_1 on network nat: HNS failed with error : Unspecified error'
  # But as we want to have them all running, simply giving the docker-compose a second 'up' mostly fixes the problem
  - name: If one container failed at startup, try to run it again
    win_shell: docker-compose --project-name app up -d
    args:
      chdir: "{{base_path}}"
    when: first_compose_up_run_result|failed
    ignore_errors: yes

  - name: Do healthchecks for all services
    include: spring-boot-app-health-check.yml
    with_items: "{{ vars.services }}"