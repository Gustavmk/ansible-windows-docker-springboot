---
- hosts: "{{host}}"
  vars:
    base_path: "C:\\spring-boot"
    spring_boot_app:
      name: weatherbackend
      port: 8090
    jar_input_path: "../../spring-cloud-netflix-docker/{{spring_boot_app.name}}/target/{{spring_boot_app.name}}-0.0.1-SNAPSHOT.jar"
    target_path: "{{base_path}}\\{{spring_boot_app.name}}"

  tasks:
  - name: Create directory C:\spring-boot\spring_boot_app.name, if not there
    win_file: path={{target_path}} state=directory

  - name: Template and copy Spring Boot app´s Dockerfile to directory C:\spring-boot\spring_boot_app.name
    win_template:
      src: "templates/Dockerfile-SpringBoot-App.j2"
      dest: "{{target_path}}\\Dockerfile"

  - name: Copy Spring Boot app´s jar-File to directory C:\spring-boot\spring_boot_app.name
    win_copy:
      src: "{{jar_input_path}}"
      dest: "{{target_path}}\\{{spring_boot_app.name}}.jar"

  - name: Stop the Service Docker container
    win_shell: docker stop {{spring_boot_app.name}}
    ignore_errors: yes

  - name: Remove the Service Docker container
    win_shell: docker rm {{spring_boot_app.name}} --force
    ignore_errors: yes

  - name: Remove the Service Docker image
    win_shell: docker rmi {{spring_boot_app.name}}:latest --force
    ignore_errors: yes

  - name: Build the Service Docker image
    win_shell: docker build . --tag {{spring_boot_app.name}}:latest
    args:
      chdir: "{{target_path}}"

  - name: Run the Service Docker container
    win_shell: "docker run -d --publish {{spring_boot_app.port}}:{{spring_boot_app.port}} --name={{spring_boot_app.name}} --restart=unless-stopped {{spring_boot_app.name}}:latest"

  - name: Healthchecking the Spring Boot app
    include: spring-boot-app-health-check.yml